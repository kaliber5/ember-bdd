{"data":{"type":"pages","id":"usage/annotations","attributes":{"html":"<h1 id=\"annotations\">Annotations</h1>\n<p>Annotations are a Cucumber equivalent of functions that accept <a href=\"https://github.com/emberjs/rfcs/blob/master/text/0232-simplify-qunit-testing-api.md#new-apis\">Ember testing hooks</a>.</p>\n<p>You prepend a feature or a scenario with one or more keywords prefixed with <code>@</code>:</p>\n<pre><code class=\"feature language-feature\">@setupApplicationTest\nFeature: Product page\n\nScenario: I should not be redirected away\n  When I visit URL \"/products\"\n  Then I should be at URL \"/products\"\n\n@setupLocalStorage\nScenario: I should be redirected when I'm a premium user\n  Given there's a local storage entry \"premium\" with value \"true\"\n  When I visit URL \"/products\"\n  Then I should be at URL \"/premium-products\"\n</code></pre>\n<p>In this feature, the initializations correspoinding to <code>@setupApplicationTest</code> will be applied to every scenario. But on the latter scenario will receive the <code>@setupLocalStorage</code> initialization.</p>\n<h2 id=\"definingannotations\">Defining annotations</h2>\n<p>Annotations are defined in the file:</p>\n<pre><code>tests/bdd/annotations.js\n</code></pre>\n<p>This file should export an object: a record of functions that accept <a href=\"https://github.com/emberjs/rfcs/blob/master/text/0232-simplify-qunit-testing-api.md#new-apis\">Ember testing hooks</a>.</p>\n<pre><code class=\"js language-js\">import { setupApplicationTest } from 'ember-qunit';\nimport { setupWindowMock } from 'ember-window-mock/test-support';\nimport setupLocalStorage from 'my-app/tests/helpers/setup-local-storage';\n\nexport default {\n  setupApplicationTest,\n  setupWindowMock,\n  setupLocalStorage,\n}\n</code></pre>\n<p>You could use them like this:</p>\n<pre><code class=\"feature language-feature\">@setupApplicationTest\n@setupWindowMock\n@setupLocalStorage\nFeature: Products page\n</code></pre>\n<h2 id=\"writingcustomannotations\">Writing custom annotations</h2>\n<p>You write a custom annotation just like you would write a custom Ember test initializer:</p>\n<pre><code class=\"js language-js\">import ThirdPartyLibrary from 'third-party-library';\n\nfunction setupThirdPartyLibrary(hooks) {\n  hooks.beforeEach(() =&gt; {\n    ThirdPartyLibrary.setup();\n  });\n\n  hooks.afterEach(() =&gt; {\n    ThirdPartyLibrary.teardown();\n  });\n}\n\nexport default {\n  setupThirdPartyLibrary();\n}\n</code></pre>\n<h2 id=\"groupingannotations\">Grouping annotations</h2>\n<p>There's a fair chance that you want all you tests to be initialized with the same set of annotations. It is annoying to write many of them for every test.</p>\n<p>To resolve this, you can create an annoation that would call multiple initializers:</p>\n<pre><code class=\"js language-js\">import { setupApplicationTest } from 'ember-qunit';\nimport { setupWindowMock } from 'ember-window-mock/test-support';\nimport setupLocalStorage from 'my-app/tests/helpers/setup-local-storage';\n\nexport default {\n  setupApplicationTest,\n  setupWindowMock,\n  setupLocalStorage,\n\n  setupApplicationTestCustom(hooks) {\n    setupApplicationTest(hooks);\n    setupWindowMock(hooks);\n    setupLocalStorage(hooks);\n  }\n}\n</code></pre>\n<p>Now you can use one <code>@setupApplicationTestCustom</code> instead of three others.</p>\n<h2 id=\"parameterizedannotations\">Parameterized annotations</h2>\n<p>Cucumber lets you invoke annotations with arguments like this:</p>\n<pre><code class=\"feature language-feature\">@setupThirdPartyLibrary=cat,dog\n@setupYetNotherLibrary={mode: 'simplified', slots: [3, 2, 1]}\nFeature: Products\n</code></pre>\n<p>The annotation argument (string after <code>=</code>) will be passed as the the second argument in your annotation function:</p>\n<pre><code class=\"js language-js\">import ThirdPartyLibrary from 'third-party-library';\nimport YetAnotherLibrary from 'yet-another-library';\n\nexport default {\n  setupThirdPartyLibrary(hooks, animalsStr) {\n    const animals = animalsStr.split(',');\n\n    hooks.afterEach(() =&gt; {\n      ThirdPartyLibrary.feedAnimals({animals});\n    });\n  },\n\n  setupYetAnotherLibrary(hooks, jsonStr) {\n    const config = JSON.parse(jsonStr);\n\n    hooks.beforeEach(() =&gt; {\n      YetNotherLibrary.init(config);\n    });\n  },\n}\n</code></pre>\n<h2 id=\"builtinannotations\">Built-in annotations</h2>\n<p>There are three annotations built into <code>ember-bdd</code>:</p>\n<ul>\n<li><code>@only</code>: prevents running all other features/scenarios not marked with <code>@only</code>; see <a href=\"https://api.qunitjs.com/QUnit/test.only/\">QUnit.test.only</a>.</li>\n<li><code>@skip</code>: prevents running given feature/scenario, but log it into QUnit; see <a href=\"https://api.qunitjs.com/QUnit/test.skip/\">QUnit.test.skip</a>.</li>\n<li><code>@todo</code>: runs a feature/scenario but expects it to fail; see <a href=\"https://api.qunitjs.com/QUnit/test.todo/\">QUnit.test.todo</a>.</li>\n</ul>","title":"Annotations","index":3}}}