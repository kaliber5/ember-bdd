{"data":{"type":"pages","id":"steps/dom","attributes":{"html":"<h1 id=\"dommanipulationsteps\">DOM manipulation steps</h1>\n<p>Package name: <code>@ember-bdd/steps-dom</code>.</p>\n<p>Steps for interacting with elements on the page, mostly delegating to <a href=\"https://github.com/emberjs/ember-test-helpers/\">@ember/test-helpers</a>.</p>\n<p>Note: this package does not include steps for interacting with the URL. Those are in the <a href=\"./ember\">steps-ember</a>.</p>\n<h2 id=\"useractionsteps\">User action steps</h2>\n<h3 id=\"clickinganelement\">Clicking an element</h3>\n<p>Triggers a click event on an element. Delegates to <a href=\"https://github.com/emberjs/ember-test-helpers/blob/master/API.md#click\">click</a>.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p>⚠ This step would silently ignore disabled form elements. That's unlike the <code>click()</code> helper from <code>@ember/test-helpers</code> which would throw an error when attempting to click a disabled element. Throwing an error lets you notice early that you're doing something that might be unintended and meaningless. But it might as well being intended, e. g. when trying to reproduce a BDD scenario written by a UI/UX designer, and the scenario involves clicking an element. See <a href=\"https://github.com/emberjs/ember-test-helpers/issues/1100\">related discussion</a> and <a href=\"https://github.com/emberjs/ember-test-helpers/pull/778\">implementation</a>.</p>\n<p><strong>Signature</strong>: </p>\n<pre><code class=\"feature language-feature\">When I click (?:on )?$emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">When I click Submit-Button\nWhen I click the Submit-Button\nWhen I click on Submit-Button\nWhen I click on the Submit-Button\n</code></pre>\n<h3 id=\"doubleclickinganelement\">Double clicking an element</h3>\n<p>Triggers a click event on an element. Delegates to <a href=\"https://github.com/emberjs/ember-test-helpers/blob/master/API.md#click\">click</a>.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p>⚠ This step would silently ignore disabled form elements. That's unlike the <code>click()</code> helper from <code>@ember/test-helpers</code> which would throw an error when attempting to click a disabled element. Throwing an error lets you notice early that you're doing something that might be unintended and meaningless. But it might as well being intended, e. g. when trying to reproduce a BDD scenario written by a UI/UX designer, and the scenario involves clicking an element. See <a href=\"https://github.com/emberjs/ember-test-helpers/issues/1100\">related discussion</a>  and <a href=\"https://github.com/emberjs/ember-test-helpers/pull/778\">implementation</a>.</p>\n<p><strong>Signature</strong>: </p>\n<pre><code class=\"feature language-feature\">When I double click (?:on )?$emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">When I double click Submit-Button\nWhen I double click the Submit-Button\nWhen I double click on Submit-Button\nWhen I double click on the Submit-Button\n</code></pre>\n<h3 id=\"typingtextintoatextfield\">Typing text into a text field</h3>\n<p>Fills text into given input, textarea or a contenteditable, or selects a value in a select. Delegates to <a href=\"https://github.com/emberjs/ember-test-helpers/blob/master/API.md#click\">click</a>.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p><strong>Signature</strong>:</p>\n<pre><code class=\"feature language-feature\">When I (?:fill|type) $emberBddString into $emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">When I type \"foo\" into the Name-Field\nWhen I fill \"bar\" into Name-Field\n</code></pre>\n<h3 id=\"movingthemousepointerintoanelement\">Moving the mouse pointer into an element</h3>\n<p>Triggers a <code>mouseenter</code> event on the element. Delegates to <a href=\"https://github.com/emberjs/ember-test-helpers/blob/master/API.md#triggerEvent\">triggerEvent</a>.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p><strong>Signature</strong>:</p>\n<pre><code class=\"feature language-feature\">When I move the mouse pointer into $emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">When I move the mouse pointer into the Name-Field\nWhen I move the mouse pointer into Name-Field\n</code></pre>\n<h3 id=\"movingthemousepointeroutofanelement\">Moving the mouse pointer out of an element</h3>\n<p>Triggers a <code>mouseleave</code> event on the element. Delegates to <a href=\"https://github.com/emberjs/ember-test-helpers/blob/master/API.md#triggerEvent\">triggerEvent</a>.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p><strong>Signature</strong>:</p>\n<pre><code class=\"feature language-feature\">When I move the mouse pointer out of $emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">When I move the mouse pointer out of the Name-Field\nWhen I move the mouse pointer out of Name-Field\n</code></pre>\n<h3 id=\"focusingintoanelement\">Focusing into an element</h3>\n<p>Delegates to <a href=\"https://github.com/emberjs/ember-test-helpers/blob/master/API.md#focus\">focus</a>.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p><strong>Signature</strong>:</p>\n<pre><code class=\"feature language-feature\">When I focus into $emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">When I focus into the Name-Field\nWhen I focus into Name-Field\n</code></pre>\n<h3 id=\"unfocusingfromanelement\">Unfocusing from an element</h3>\n<p>Delegates to <a href=\"https://github.com/emberjs/ember-test-helpers/blob/master/API.md#blur\">blur</a>.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p><strong>Signature</strong>:</p>\n<pre><code class=\"feature language-feature\">When I (?:focus|unfocus|blur) (?:out of|from) $emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">When I focus out of the Name-Field\nWhen I unfocus out of the Name-Field\nWhen I blur out of Name-Field\nWhen I focus from the Name-Field\nWhen I unfocus from the Name-Field\nWhen I blur from Name-Field\n</code></pre>\n<h3 id=\"selectingordeselectinganinputorradiobutton\">Selecting or deselecting an input or radio button</h3>\n<p>If the matching element is not a checkbox or radio, then a checkbox/radio will be looked up inside the matching element. This lets you work with an input by targeting its container.</p>\n<p>This step delegates to <a href=\"https://github.com/emberjs/ember-test-helpers/blob/master/API.md#click\">click</a>, but it also makes a check comparing the element's initial state with the action. It will crash when attempting to delelect a deselected input/radio, select a selected input/radio, deleselect any radio.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p><strong>Signature</strong>:</p>\n<pre><code class=\"feature language-feature\">When I (de)?select (?:the )?(?:radio button|checkbox) $emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">When I select checkbox Consent-Field\nWhen I deselect the checkbox Consent-Field\nWhen I select radio Radio[prefer not to tell]\n</code></pre>\n<h2 id=\"assertionsteps\">Assertion steps</h2>\n<h3 id=\"assertingelemnetexistencecount\">Asserting elemnet existence/count</h3>\n<p>Asserts that a given number of elements exist or dont' exist on a page.</p>\n<p><strong>Signature</strong>: </p>\n<pre><code class=\"feature language-feature\">Then there should be (NO |no )?(?:(\\\\d+) )?$emberBddLabel\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">Then there should be NO Items\nThen there should be 0 Items\nThen there should be an Item\nThen there should be 1 Item\nThen there should be 2 Items\n</code></pre>\n<h3 id=\"assertingelementhasdoesnothavegiventext\">Asserting element has (does not have) given text</h3>\n<p>If a given element is an input or textarea, then this step asserts that the element's value exactly matches given text.</p>\n<p>Otherwise, it asserts that the element <strong>trimmed</strong> text content matches given text.</p>\n<p>Expects exactly one element to match the selector label.</p>\n<p><strong>Signature</strong>:</p>\n<pre><code>Then $emberBddLabel should (not |NOT )?(?:have text|say|be) $emberBddString\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">Then the Error-Message should have text \"Something went wrong!\"\nThen the Error-Message should NOT have text \"Something went wrong!\"\nThen the Title of 1st Post should say \"Hello, World!\"\nThen the Title of 1st Post should NOT say \"Hello, World!\"\nThen the Quantity of the Cart should be \"2\"\nThen the Quantity of the Cart should NOT be \"2\"\n</code></pre>\n<h3 id=\"assertingelementhasdoesnothavefocus\">Asserting element has (does not have) focus</h3>\n<p>Expects exactly one element to match the selector label (except for NOT cases).</p>\n<p><strong>Signature</strong>:</p>\n<pre><code>Then $emberBddLabel should (not |NOT )?have focus\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">Then the Link should have focus\nThen the Link should not have focus\nThen the Link should NOT have focus\n</code></pre>\n<h3 id=\"assertingelementhasdoesnothavegivenhtmlclass\">Asserting element has (does not have) given HTML class</h3>\n<p>Expects exactly one element to match the selector label (except for NOT cases).</p>\n<p><strong>Signature</strong>:</p>\n<pre><code>Then $emberBddLabel should (not |NOT )?have HTML class $emberBddString\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">Then the Link should have HTML class \"active\"\nThen the Link should not have HTML class \"disabled\"\nThen the Link should NOT have HTML class \"current\"\n</code></pre>\n<h3 id=\"assertingcheckboxradioischecked\">Asserting checkbox/radio is checked</h3>\n<p>Expects exactly one element to match the selector label (except for NOT cases).</p>\n<p>Expects the element to be a checkbox or a radio button.</p>\n<p><strong>Signature</strong>:</p>\n<pre><code>Then $emberBddLabel should (not |NOT )?be checked\n</code></pre>\n<p><strong>Examples</strong>:</p>\n<pre><code class=\"feature language-feature\">Then the Consent-Checkbox should be checked\nThen the Radio(yes) should be checked\nThen the Radio(no) should NOT be cheked\nThen the Radio(no) should not be cheked\n</code></pre>","title":"DOM","index":3}}}